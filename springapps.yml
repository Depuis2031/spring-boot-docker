apiVersion: apps/v1
kind: Deployment
metadata:
  name:  spring-app
spec:
  replicas: 2
  selector:
   matchLabels:
     app: spring-app
  template:
    metadata:
      labels:
        app: spring-app
    spec:
      containers:
      - name: spring-app
        image:  depuis2031/spring-boot-mongo
        resources:
          requests:
            cpu: "20m"
            memory: "55M"
          limits:
            memory: "512Mi"
            cpu: "500m"
        ports:
        - containerPort:  8080
        env:
        - name:  MONGO_DB_HOSTNAME
          value:  mongosvc
        - name:  MONGO_DB_USERNAME
          value:  njang
        - name:  MONGO_DB_PASSWORD
          value:  njang@123
---
kind: Service
apiVersion: v1
metadata:
  name:  springapp-svc
spec:
  selector:
    app:  spring-app
  type:  LoadBalancer
  ports:
 -  port:  80
     targetPort:  8080

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodbpvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongodb
spec:
  # modify replicas according to your case
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      name: myapp
      labels:
        app: mongo
    spec:
      volumes:
      - name: pvc
        persistentVolumeClaim:
          claimName: mongodbpvc
      containers:
      - name: mongocontainer
        image: mongo
        ports:
        - containerPort:  27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: njang
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: njang@123
        volumeMounts:
        - name: pvc
          mountPath: /data/db
---
apiVersion: v1
kind: Service
metadata:
  name: mongosvc
spec:
  selector:
    app: mongo
  type: ClusterIP
  ports:
  - port: 27017
    targetPort: 27017


